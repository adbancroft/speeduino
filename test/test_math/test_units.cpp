#include <unity.h>
#include "units.h"
#include "../test_utils.h"

static constexpr conversionFactor IDENTITY = {1, 0};
static constexpr conversionFactor SCALE_ONLY = {10, 0};
static constexpr conversionFactor POSITIVE_TRANSLATE = {1, 33};
static constexpr conversionFactor NEGATIVE_TRANSLATE = {1, -33};
static constexpr conversionFactor SCALE_AND_TRANSLATE = {11, -33};
//
static constexpr conversionFactor CONVERT_100_SCALE = { 100U, 0 };
static constexpr conversionFactor CONVERT_10_SCALE = { 10U, 0 };
static constexpr conversionFactor CONVERT_2_SCALE = { 2U, 0 };
static constexpr conversionFactor CONVERT_U16U8_SCALE = { 33U, 0 };

static void test_toWorkingU8U16(void)
{
    TEST_ASSERT_EQUAL_UINT16(0, toWorkingU8U16(IDENTITY, 0));
    TEST_ASSERT_EQUAL_UINT16(UINT8_MAX, toWorkingU8U16(IDENTITY, UINT8_MAX));

    TEST_ASSERT_EQUAL_UINT16(0, toWorkingU8U16(SCALE_ONLY, 0));
    TEST_ASSERT_EQUAL_UINT16(10, toWorkingU8U16(SCALE_ONLY, 1));
    TEST_ASSERT_EQUAL_UINT16(10U * (uint16_t)UINT8_MAX, toWorkingU8U16(SCALE_ONLY, UINT8_MAX));

    TEST_ASSERT_EQUAL_UINT16(POSITIVE_TRANSLATE.translate, toWorkingU8U16(POSITIVE_TRANSLATE, 0));
    TEST_ASSERT_EQUAL_UINT16(34, toWorkingU8U16(POSITIVE_TRANSLATE, 1));
    TEST_ASSERT_EQUAL_UINT16(33U + (uint16_t)UINT8_MAX, toWorkingU8U16(POSITIVE_TRANSLATE, UINT8_MAX));

    TEST_ASSERT_EQUAL_UINT16(0U, toWorkingU8U16(NEGATIVE_TRANSLATE, -NEGATIVE_TRANSLATE.translate));
    TEST_ASSERT_EQUAL_UINT16(1U, toWorkingU8U16(NEGATIVE_TRANSLATE, -NEGATIVE_TRANSLATE.translate + 1));
    TEST_ASSERT_EQUAL_UINT16((uint16_t)UINT8_MAX - 33U, toWorkingU8U16(NEGATIVE_TRANSLATE, UINT8_MAX));

    TEST_ASSERT_EQUAL_UINT16(0U, toWorkingU8U16(SCALE_AND_TRANSLATE, 33));
    TEST_ASSERT_EQUAL_UINT16(11U, toWorkingU8U16(SCALE_AND_TRANSLATE, 34));
    TEST_ASSERT_EQUAL_UINT16(((uint16_t)UINT8_MAX - 33U) * 11, toWorkingU8U16(SCALE_AND_TRANSLATE, UINT8_MAX));

    // Overflow
    TEST_ASSERT_EQUAL_UINT16(65173, toWorkingU8U16(SCALE_AND_TRANSLATE, 0U));
    TEST_ASSERT_EQUAL_UINT16(UINT16_MAX - 33U + 1U, toWorkingU8U16(NEGATIVE_TRANSLATE, 0U));
}

static void test_toWorkingU8S16(void)
{
    TEST_ASSERT_EQUAL_INT16(0, toWorkingU8S16(IDENTITY, 0));
    TEST_ASSERT_EQUAL_INT16(UINT8_MAX, toWorkingU8S16(IDENTITY, UINT8_MAX));

    TEST_ASSERT_EQUAL_INT16(0, toWorkingU8S16(SCALE_ONLY, 0));
    TEST_ASSERT_EQUAL_INT16(10, toWorkingU8S16(SCALE_ONLY, 1));
    TEST_ASSERT_EQUAL_INT16(10U * (int16_t)UINT8_MAX, toWorkingU8S16(SCALE_ONLY, UINT8_MAX));

    TEST_ASSERT_EQUAL_INT16(POSITIVE_TRANSLATE.translate, toWorkingU8S16(POSITIVE_TRANSLATE, 0));
    TEST_ASSERT_EQUAL_INT16(34, toWorkingU8S16(POSITIVE_TRANSLATE, 1));
    TEST_ASSERT_EQUAL_INT16(33U + (int16_t)UINT8_MAX, toWorkingU8S16(POSITIVE_TRANSLATE, UINT8_MAX));

    TEST_ASSERT_EQUAL_INT16(-33, toWorkingU8S16(NEGATIVE_TRANSLATE, 0U));
    TEST_ASSERT_EQUAL_INT16((int16_t)UINT8_MAX - 33U, toWorkingU8S16(NEGATIVE_TRANSLATE, UINT8_MAX));

    TEST_ASSERT_EQUAL_INT16(-363, toWorkingU8S16(SCALE_AND_TRANSLATE, 0));
    TEST_ASSERT_EQUAL_INT16(0, toWorkingU8S16(SCALE_AND_TRANSLATE, 33));
    TEST_ASSERT_EQUAL_INT16(11, toWorkingU8S16(SCALE_AND_TRANSLATE, 34));
    TEST_ASSERT_EQUAL_INT16(((int16_t)UINT8_MAX - 33U) * 11, toWorkingU8S16(SCALE_AND_TRANSLATE, UINT8_MAX));
}


static void test_toWorkingS8S16(void)
{
    TEST_ASSERT_EQUAL_INT16(0, toWorkingS8S16(IDENTITY, 0));
    TEST_ASSERT_EQUAL_INT16(INT8_MAX, toWorkingS8S16(IDENTITY, INT8_MAX));
    TEST_ASSERT_EQUAL_INT16(INT8_MIN, toWorkingS8S16(IDENTITY, INT8_MIN));

    TEST_ASSERT_EQUAL_INT16(0, toWorkingS8S16(SCALE_ONLY, 0));
    TEST_ASSERT_EQUAL_INT16(10U * (int16_t)INT8_MAX, toWorkingS8S16(SCALE_ONLY, INT8_MAX));
    TEST_ASSERT_EQUAL_INT16(10U * (int16_t)INT8_MIN, toWorkingS8S16(SCALE_ONLY, INT8_MIN));

    TEST_ASSERT_EQUAL_INT16(POSITIVE_TRANSLATE.translate, toWorkingS8S16(POSITIVE_TRANSLATE, 0));
    TEST_ASSERT_EQUAL_INT16(33U + (int16_t)INT8_MAX, toWorkingS8S16(POSITIVE_TRANSLATE, INT8_MAX));
    TEST_ASSERT_EQUAL_INT16(33U + (int16_t)INT8_MIN, toWorkingS8S16(POSITIVE_TRANSLATE, INT8_MIN));

    TEST_ASSERT_EQUAL_INT16(-33, toWorkingS8S16(NEGATIVE_TRANSLATE, 0U));
    TEST_ASSERT_EQUAL_INT16((int16_t)INT8_MAX - 33U, toWorkingS8S16(NEGATIVE_TRANSLATE, INT8_MAX));
    TEST_ASSERT_EQUAL_INT16((int16_t)INT8_MIN - 33U, toWorkingS8S16(NEGATIVE_TRANSLATE, INT8_MIN));

    TEST_ASSERT_EQUAL_INT16(-363, toWorkingS8S16(SCALE_AND_TRANSLATE, 0));
    TEST_ASSERT_EQUAL_INT16(((int16_t)INT8_MAX - 33U) * 11, toWorkingS8S16(SCALE_AND_TRANSLATE, INT8_MAX));
	TEST_ASSERT_EQUAL_INT16(((int16_t)INT8_MIN - 33U) * 11, toWorkingS8S16(SCALE_AND_TRANSLATE, INT8_MIN));
}

static void test_toWorkingU32(void)
{
    TEST_ASSERT_EQUAL_UINT32(0, toWorkingU32(IDENTITY, 0));
    TEST_ASSERT_EQUAL_UINT32(UINT16_MAX, toWorkingU32(IDENTITY, UINT16_MAX));

    TEST_ASSERT_EQUAL_UINT32(0, toWorkingU32(SCALE_ONLY, 0));
    TEST_ASSERT_EQUAL_UINT32(10, toWorkingU32(SCALE_ONLY, 1));
    TEST_ASSERT_EQUAL_UINT32(10U * (uint32_t)UINT16_MAX, toWorkingU32(SCALE_ONLY, UINT16_MAX));

    TEST_ASSERT_EQUAL_UINT32(POSITIVE_TRANSLATE.translate, toWorkingU32(POSITIVE_TRANSLATE, 0));
    TEST_ASSERT_EQUAL_UINT32(34, toWorkingU32(POSITIVE_TRANSLATE, 1));
    TEST_ASSERT_EQUAL_UINT32(33U + (uint32_t)UINT16_MAX, toWorkingU32(POSITIVE_TRANSLATE, UINT16_MAX));

    TEST_ASSERT_EQUAL_UINT32(0U, toWorkingU32(NEGATIVE_TRANSLATE, -NEGATIVE_TRANSLATE.translate));
    TEST_ASSERT_EQUAL_UINT32(1U, toWorkingU32(NEGATIVE_TRANSLATE, -NEGATIVE_TRANSLATE.translate + 1));
    TEST_ASSERT_EQUAL_UINT32((uint32_t)UINT16_MAX - 33U, toWorkingU32(NEGATIVE_TRANSLATE, UINT16_MAX));
    // Overflow
    // TEST_ASSERT_EQUAL_UINT32(UINT16_MAX - 33U + 1U, toWorkingU32(NEGATIVE_TRANSLATE, 0U));

    TEST_ASSERT_EQUAL_UINT32(0U, toWorkingU32(SCALE_AND_TRANSLATE, 33));
    TEST_ASSERT_EQUAL_UINT32(11U, toWorkingU32(SCALE_AND_TRANSLATE, 34));
    TEST_ASSERT_EQUAL_UINT32(((uint32_t)UINT16_MAX - 33U) * 11, toWorkingU32(SCALE_AND_TRANSLATE, UINT16_MAX));
    // Overflow
    // TEST_ASSERT_EQUAL_UINT32(65173, toWorkingU32(SCALE_AND_TRANSLATE, 0U));    
}

static void test_toRawU8(void) {
    TEST_ASSERT_EQUAL_UINT8(0, toRawU8(IDENTITY, toWorkingU8U16(IDENTITY, 0)));
    TEST_ASSERT_EQUAL_UINT8(UINT8_MAX, toRawU8(IDENTITY, toWorkingU8U16(IDENTITY, UINT8_MAX)));

    TEST_ASSERT_EQUAL_UINT8(0, toRawU8(SCALE_ONLY, toWorkingU8U16(SCALE_ONLY, 0)));
    TEST_ASSERT_EQUAL_UINT8(10, toRawU8(SCALE_ONLY, toWorkingU8U16(SCALE_ONLY, 10)));
    TEST_ASSERT_EQUAL_UINT8(UINT8_MAX, toRawU8(SCALE_ONLY, toWorkingU8U16(SCALE_ONLY, UINT8_MAX)));

    TEST_ASSERT_EQUAL_UINT8(0, toRawU8(POSITIVE_TRANSLATE, toWorkingU8U16(POSITIVE_TRANSLATE, 0)));
    TEST_ASSERT_EQUAL_UINT8(34, toRawU8(POSITIVE_TRANSLATE, toWorkingU8U16(POSITIVE_TRANSLATE, 34)));
    TEST_ASSERT_EQUAL_UINT8(UINT8_MAX, toRawU8(POSITIVE_TRANSLATE, toWorkingU8U16(POSITIVE_TRANSLATE, UINT8_MAX)));

    TEST_ASSERT_EQUAL_UINT8(0, toRawU8(NEGATIVE_TRANSLATE, toWorkingU8U16(NEGATIVE_TRANSLATE, 0U)));
    TEST_ASSERT_EQUAL_UINT8(33, toRawU8(NEGATIVE_TRANSLATE, toWorkingU8U16(NEGATIVE_TRANSLATE, 33)));
    TEST_ASSERT_EQUAL_UINT8(UINT8_MAX, toRawU8(NEGATIVE_TRANSLATE, toWorkingU8U16(NEGATIVE_TRANSLATE, UINT8_MAX)));

    TEST_ASSERT_EQUAL_UINT8(33, toRawU8(SCALE_AND_TRANSLATE, toWorkingU8U16(SCALE_AND_TRANSLATE, 33)));
    TEST_ASSERT_EQUAL_UINT8(UINT8_MAX, toRawU8(SCALE_AND_TRANSLATE, toWorkingU8U16(SCALE_AND_TRANSLATE, UINT8_MAX)));

    TEST_ASSERT_EQUAL_UINT8(0, toRawU8(CONVERT_100_SCALE, toWorkingU8U16(CONVERT_100_SCALE, 0)));
    TEST_ASSERT_EQUAL_UINT8(3, toRawU8(CONVERT_100_SCALE, toWorkingU8U16(CONVERT_100_SCALE, 3)));
    TEST_ASSERT_EQUAL_UINT8(UINT8_MAX, toRawU8(CONVERT_100_SCALE, toWorkingU8U16(CONVERT_100_SCALE, UINT8_MAX)));

    // Test division special cases
    TEST_ASSERT_EQUAL_INT8(UINT8_MAX, toRawU8(CONVERT_100_SCALE, toWorkingU8U16(CONVERT_100_SCALE, UINT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(0, toRawU8(CONVERT_100_SCALE, toWorkingU8U16(CONVERT_100_SCALE, 0)));
    TEST_ASSERT_EQUAL_INT8(UINT8_MAX, toRawU8(CONVERT_10_SCALE, toWorkingU8U16(CONVERT_10_SCALE, UINT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(0, toRawU8(CONVERT_10_SCALE, toWorkingU8U16(CONVERT_10_SCALE, 0)));
    TEST_ASSERT_EQUAL_INT8(UINT8_MAX, toRawU8(CONVERT_2_SCALE, toWorkingU8U16(CONVERT_2_SCALE, UINT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(0, toRawU8(CONVERT_2_SCALE, toWorkingU8U16(CONVERT_2_SCALE, 0)));
    TEST_ASSERT_EQUAL_INT8(992, toRawU8(CONVERT_U16U8_SCALE, INT16_MAX));    

    // Overflow
    TEST_ASSERT_EQUAL_UINT8(69, toRawU8(SCALE_AND_TRANSLATE, toWorkingU8U16(SCALE_AND_TRANSLATE, 0)));
}


static void test_toRawS8(void) {
    TEST_ASSERT_EQUAL_INT8(0, toRawS8(IDENTITY, toWorkingS8S16(IDENTITY, 0)));
    TEST_ASSERT_EQUAL_INT8(INT8_MAX, toRawS8(IDENTITY, toWorkingS8S16(IDENTITY, INT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(INT8_MIN, toRawS8(IDENTITY, toWorkingS8S16(IDENTITY, INT8_MIN)));

    TEST_ASSERT_EQUAL_INT8(0, toRawS8(SCALE_ONLY, toWorkingS8S16(SCALE_ONLY, 0)));
    TEST_ASSERT_EQUAL_INT8(INT8_MAX, toRawS8(SCALE_ONLY, toWorkingS8S16(SCALE_ONLY, INT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(INT8_MIN, toRawS8(SCALE_ONLY, toWorkingS8S16(SCALE_ONLY, INT8_MIN)));

    TEST_ASSERT_EQUAL_INT8(0, toRawS8(POSITIVE_TRANSLATE, toWorkingS8S16(POSITIVE_TRANSLATE, 0)));
    TEST_ASSERT_EQUAL_INT8(INT8_MAX, toRawS8(POSITIVE_TRANSLATE, toWorkingS8S16(POSITIVE_TRANSLATE, INT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(INT8_MIN, toRawS8(POSITIVE_TRANSLATE, toWorkingS8S16(POSITIVE_TRANSLATE, INT8_MIN)));

    TEST_ASSERT_EQUAL_INT8(0, toRawS8(NEGATIVE_TRANSLATE, toWorkingS8S16(NEGATIVE_TRANSLATE, 0)));
    TEST_ASSERT_EQUAL_INT8(INT8_MAX, toRawS8(NEGATIVE_TRANSLATE, toWorkingS8S16(NEGATIVE_TRANSLATE, INT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(INT8_MIN, toRawS8(NEGATIVE_TRANSLATE, toWorkingS8S16(NEGATIVE_TRANSLATE, INT8_MIN)));

    TEST_ASSERT_EQUAL_INT8(0, toRawS8(SCALE_AND_TRANSLATE, toWorkingS8S16(SCALE_AND_TRANSLATE, 0)));
    TEST_ASSERT_EQUAL_INT8(INT8_MAX, toRawS8(SCALE_AND_TRANSLATE, toWorkingS8S16(SCALE_AND_TRANSLATE, INT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(INT8_MIN, toRawS8(SCALE_AND_TRANSLATE, toWorkingS8S16(SCALE_AND_TRANSLATE, INT8_MIN)));
    
    // Test division special cases
    TEST_ASSERT_EQUAL_INT8(INT8_MAX, toRawS8(CONVERT_100_SCALE, toWorkingS8S16(CONVERT_100_SCALE, INT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(INT8_MIN, toRawS8(CONVERT_100_SCALE, toWorkingS8S16(CONVERT_100_SCALE, INT8_MIN)));
    TEST_ASSERT_EQUAL_INT8(INT8_MAX, toRawS8(CONVERT_10_SCALE, toWorkingS8S16(CONVERT_10_SCALE, INT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(INT8_MIN, toRawS8(CONVERT_10_SCALE, toWorkingS8S16(CONVERT_10_SCALE, INT8_MIN)));
    TEST_ASSERT_EQUAL_INT8(INT8_MAX, toRawS8(CONVERT_2_SCALE, toWorkingS8S16(CONVERT_2_SCALE, INT8_MAX)));
    TEST_ASSERT_EQUAL_INT8(INT8_MIN, toRawS8(CONVERT_2_SCALE, toWorkingS8S16(CONVERT_2_SCALE, INT8_MIN)));
    TEST_ASSERT_EQUAL_INT8(992, toRawS8(CONVERT_U16U8_SCALE, INT16_MAX));
}

static void test_temperatureAddOffset(void) {
    TEST_ASSERT_EQUAL_UINT8(0, temperatureAddOffset(-40));
    TEST_ASSERT_EQUAL_UINT8(255, temperatureAddOffset(215));
}

static void test_temperatureRemoveOffset(void) {
    TEST_ASSERT_EQUAL_INT16(-40, temperatureRemoveOffset(0));
    TEST_ASSERT_EQUAL_INT16(215, temperatureRemoveOffset(255));
}

void testUnitConversions(void)
{
  SET_UNITY_FILENAME() {
    RUN_TEST(test_toWorkingU8U16);
    RUN_TEST(test_toWorkingU8S16);
    RUN_TEST(test_toWorkingS8S16);
    RUN_TEST(test_toWorkingU32);
    RUN_TEST(test_toRawU8);
    RUN_TEST(test_toRawS8);
    RUN_TEST(test_temperatureRemoveOffset);
    RUN_TEST(test_temperatureAddOffset);
  }
}